// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DBFirst.Entities;
using Microsoft.EntityFrameworkCore;

namespace DBFirst.Contexts;

public partial class NorthwindDBContext : DbContext
{
    public NorthwindDBContext()
    {
    }

    public NorthwindDBContext(DbContextOptions<NorthwindDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Order_Details_Extended> Order_Details_Extendeds { get; set; }

    public virtual DbSet<Order_Subtotal> Order_Subtotals { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Product_Sales_for_1997> Product_Sales_for_1997s { get; set; }

    public virtual DbSet<Sales_Totals_by_Amount> Sales_Totals_by_Amounts { get; set; }

    public virtual DbSet<Sales_by_Category> Sales_by_Categories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Northwind;Integrated Security=True ; TrustServerCertificate = True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.CustomerID).IsFixedLength();
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation).HasConstraintName("FK_Employees_Employees");
        });

        modelBuilder.Entity<Order_Details_Extended>(entity =>
        {
            entity.ToView("Order Details Extended");
        });

        modelBuilder.Entity<Order_Subtotal>(entity =>
        {
            entity.ToView("Order Subtotals");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.ReorderLevel).HasDefaultValue((short)0);
            entity.Property(e => e.UnitPrice).HasDefaultValue(0m);
            entity.Property(e => e.UnitsInStock).HasDefaultValue((short)0);
            entity.Property(e => e.UnitsOnOrder).HasDefaultValue((short)0);

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasConstraintName("FK_Products_Categories");
        });

        modelBuilder.Entity<Product_Sales_for_1997>(entity =>
        {
            entity.ToView("Product Sales for 1997");
        });

        modelBuilder.Entity<Sales_Totals_by_Amount>(entity =>
        {
            entity.ToView("Sales Totals by Amount");
        });

        modelBuilder.Entity<Sales_by_Category>(entity =>
        {
            entity.ToView("Sales by Category");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}